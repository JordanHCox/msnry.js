(function($){let masonryCSSInjected=!1;$.fn.masonry=function(options){const settings=$.extend({minColumns:1,maxColumns:3,gap:'20px',randomFill:0,type:'masonry',scrollAnimation:{type:'fade',speed:300,easing:'ease'}},options);let hasResizedOnce=!1;const resolvedEasing=settings.scrollAnimation.easing==='elastic'?'cubic-bezier(0.68, -0.6, 0.32, 1.6)':settings.scrollAnimation.easing;function injectMasonryStyles(){if(masonryCSSInjected)return;masonryCSSInjected=!0;let css='';if(settings.type==='masonry'){css=`
          .masonry-wrap {
            width: 100%;
            height: auto;
            display: block;
            border-radius: 4px;
            opacity: 0;
            transition: transform ${settings.scrollAnimation.speed}ms ${resolvedEasing}, opacity ${settings.scrollAnimation.speed}ms ${resolvedEasing};
          }

          .masonry-wrap.fade {
            transform: none;
          }

          .masonry-wrap.scale {
            transform: scale(0.8);
          }

          .masonry-wrap.slide {
            transform: translateY(20px);
          }

          .masonry-wrap.visible.fade,
          .masonry-wrap.visible.scale,
          .masonry-wrap.visible.slide {
            opacity: 1;
            transform: none;
          }

          .masonry-column {
            display: flex;
            flex-direction: column;
            flex: 1;
            min-width: 0;
          }
        `}else if(settings.type==='cobble'){css=`
          .wide {
            grid-column: span 2;
          }
          .tall {
            grid-row: span 2;
          }
          .big {
            grid-column: span 2;
            grid-row: span 2;
          }
          @media (max-width: 599px) {
            .wide, .tall, .big {
              grid-column: span 1 !important;
              grid-row: span 1 !important;
            }
            .cobble-container {
              grid-template-columns: 1fr !important;
            }
          }
          .cobble-cont {
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 20px;
            opacity: 0;
            transition: transform ${settings.scrollAnimation.speed}ms ${resolvedEasing}, opacity ${settings.scrollAnimation.speed}ms ${resolvedEasing};
          }
          .cobble-cont.visible.fade {
            opacity: 1;
            transform: none;
          }
          .cobble-cont.fade {
            transform: none;
          }
          .cobble-cont.scale {
            transform: scale(0.8);
          }
          .cobble-cont.visible.scale {
            opacity: 1;
            transform: scale(1);
          }
          .cobble-cont.slide {
            transform: translateY(20px);
          }
          .cobble-cont.visible.slide {
            opacity: 1;
            transform: translateY(0);
          }
          .cobble-cont > * {
            width: 100%;
            height: 100%;
          }
          .cobble-cont > img {
            object-fit: cover;
          }
        `}
const style=document.createElement('style');style.textContent=css;document.head.appendChild(style)}
return this.each(function(){const $container=$(this);injectMasonryStyles();let currentColumns=null;let originalItems=[];if(settings.type==='masonry'){$container.css({display:'flex',gap:settings.gap});const $children=$container.children().not('.masonry-column');$children.each(function(){const $child=$(this);if(!$child.parent().hasClass('masonry-wrap')){$child.wrap('<div class="masonry-wrap"></div>')}});const $wrapped=$container.children('.masonry-wrap');originalItems=$wrapped.toArray();originalItems.forEach((item,index)=>{const $item=$(item);if(!$item.data('masonry-id')){$item.attr('data-masonry-id',`masonry-${index}-${Date.now()}`)}});function buildMasonry(columnsCount){const positions=new Map();$container.find('.masonry-wrap').each(function(){const id=$(this).data('masonry-id');if(id){positions.set(id,this.getBoundingClientRect())}});$container.empty();for(let i=0;i<columnsCount;i++){$container.append(`<div class="masonry-column" style="gap:${settings.gap};"></div>`)}
const $columns=$container.children('.masonry-column');const observer=new IntersectionObserver((entries,obs)=>{entries.forEach(entry=>{if(entry.isIntersecting){$(entry.target).addClass('visible');obs.unobserve(entry.target)}})},{threshold:0.1});originalItems.forEach((item,index)=>{const $item=$(item);const id=$item.data('masonry-id');$item.removeClass('visible fade scale slide');$item.addClass(settings.scrollAnimation.type);const colIndex=index%columnsCount;const $targetCol=$columns.eq(colIndex);$targetCol.append($item);observer.observe(item);if(hasResizedOnce){requestAnimationFrame(()=>{const newRect=$item[0].getBoundingClientRect();const oldRect=positions.get(id);if(oldRect){const dx=oldRect.left-newRect.left;const dy=oldRect.top-newRect.top;$item.css({transition:'none',transform:`translate(${dx}px, ${dy}px)`});$item[0].offsetWidth;requestAnimationFrame(()=>{$item.css({transition:'transform 300ms ease, opacity 300ms ease',transform:'translate(0, 0)',opacity:1})})}})}})}
function responsiveMasonry(){const width=$container.width();const minCols=settings.minColumns;const maxCols=settings.maxColumns;const baseWidth=400;const idealColumns=Math.floor(width/baseWidth);const snappedColumns=Math.max(minCols,Math.min(maxCols,idealColumns));if(snappedColumns!==currentColumns){currentColumns=snappedColumns;buildMasonry(snappedColumns);hasResizedOnce=!0}}
responsiveMasonry();$(window).on('resize',responsiveMasonry)}})}})(jQuery)